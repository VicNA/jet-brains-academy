type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    import java.util.Objects;

    public class Seat {
        private int row;
        private int column;
        private int price;
        private boolean purchased;

        public Seat() {
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = row <= 4 ? 10 : 8;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public boolean isPurchased() {
            return purchased;
        }

        public void setPurchased(boolean purchased) {
            this.purchased = purchased;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Seat seat = (Seat) o;
            return row == seat.row && column == seat.column;
        }

        @Override
        public int hashCode() {
            return Objects.hash(row, column);
        }
    }
  learner_created: true
- name: src/cinema/dto/ReturnedTicket.java
  visible: true
  text: |
    package cinema.dto;

    public class ReturnedTicket {
        private SeatDto returned_ticket;

        public SeatDto getReturned_ticket() {
            return returned_ticket;
        }

        public void setReturned_ticket(SeatDto returned_ticket) {
            this.returned_ticket = returned_ticket;
        }
    }
  learner_created: true
- name: src/cinema/dto/RequestTicket.java
  visible: true
  text: |
    package cinema.dto;

    public class RequestTicket {
        private String token;

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/converters/TicketConverter.java
  visible: true
  text: |
    package cinema.converters;

    import cinema.dto.PurchasedTicket;
    import cinema.dto.ReturnedTicket;
    import cinema.dto.SeatDto;
    import cinema.model.Seat;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    import java.util.Map;

    @Component
    public class TicketConverter {

        @Autowired
        private SeatConverter seatConverter;

        public PurchasedTicket convertToPurchasedTicket(Map.Entry<String, Seat> entryTicket) {
            return new PurchasedTicket(entryTicket.getKey(), seatConverter.convertToDto(entryTicket.getValue()));
        }

        public ReturnedTicket convertToReturnTicket(Seat seat) {
            ReturnedTicket ticket = new ReturnedTicket();
            ticket.setReturned_ticket(seatConverter.convertToDto(seat));
            return ticket;
        }


    }
  learner_created: true
- name: src/cinema/model/CinemaRoom.java
  visible: true
  text: |
    package cinema.model;

    import cinema.dto.RequestSeat;

    import java.util.*;
    import java.util.concurrent.ConcurrentHashMap;

    public class CinemaRoom {

        private int total_rows;
        private int total_columns;
        private final ConcurrentHashMap<String, Seat> tickets = new ConcurrentHashMap<>();

        public CinemaRoom(int total_rows, int total_columns) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            initRoom();
        }

        private void initRoom() {
            for (int i = 0; i < total_rows; i++) {
                for (int j = 0; j < total_columns; j++) {
                    tickets.putIfAbsent(
                            UUID.randomUUID().toString(),
                            new Seat(i + 1, j + 1));
                }
            }
        }

        public Optional<Map.Entry<String, Seat>> findSeat(int row, int column) {
            return tickets.entrySet().stream()
                    .filter(entry ->
                            entry.getValue().getRow() == row && entry.getValue().getColumn() == column)
                    .findFirst();

        }

        public Optional<Seat> returnTicket(String token) {
            Seat seat = tickets.get(token);
            if (seat != null)
                seat.setPurchased(false);

            return Optional.ofNullable(seat);
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public ConcurrentHashMap<String, Seat> getTickets() {
            return tickets;
        }
    }
  learner_created: true
- name: src/cinema/dto/PurchasedTicket.java
  visible: true
  text: |
    package cinema.dto;

    public class PurchasedTicket {
        private String token;
        private SeatDto ticket;

        public PurchasedTicket(String token, SeatDto ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public SeatDto getTicket() {
            return ticket;
        }

        public void setTicket(SeatDto ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/controllers/TicketController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.converters.CinemaRoomConverter;
    import cinema.converters.SeatConverter;
    import cinema.converters.TicketConverter;
    import cinema.dto.CinemaRoomDto;
    import cinema.dto.RequestSeat;
    import cinema.dto.RequestTicket;
    import cinema.exceptions.MessageException;
    import cinema.model.CinemaRoom;
    import cinema.model.Seat;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.Map;
    import java.util.Optional;

    @RestController
    public class TicketController {
        private final CinemaRoom cinemaRoom = new CinemaRoom(9, 9);
        @Autowired
        private TicketConverter ticketConverter;
        @Autowired
        private CinemaRoomConverter cinemaRoomConverter;
        @Autowired
        private SeatConverter seatConverter;

        @GetMapping("/seats")
        public CinemaRoomDto getSeats() {
            return cinemaRoomConverter.convertToDto(cinemaRoom);
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> purchase(@RequestBody RequestSeat requestSeat) {
            Optional<Map.Entry<String, Seat>> ticket = cinemaRoom.findSeat(requestSeat.getRow(), requestSeat.getColumn());
            if (ticket.isEmpty()) {
                return new ResponseEntity<>(
                        new MessageException("The number of a row or a column is out of bounds!"),
                        HttpStatus.BAD_REQUEST);
            }
            if (ticket.get().getValue().isPurchased()) {
                return new ResponseEntity<>(
                        new MessageException("The ticket has been already purchased!"),
                        HttpStatus.BAD_REQUEST);
            } else {
                ticket.get().getValue().setPurchased(true);
            }
            return new ResponseEntity<>(ticketConverter.convertToPurchasedTicket(ticket.get()), HttpStatus.OK);
        }

        @PostMapping("/return")
        public ResponseEntity<?> returnTicket(@RequestBody RequestTicket ticket) {
            Optional<Seat> seat = cinemaRoom.returnTicket(ticket.getToken());
            if (seat.isEmpty()) {
                return new ResponseEntity<>(
                        new MessageException("Wrong token!"),
                        HttpStatus.BAD_REQUEST);
            }

            return new ResponseEntity<>(
                    ticketConverter.convertToReturnTicket(seat.get()),
                    HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/cinema/dto/SeatDto.java
  visible: true
  text: |
    package cinema.dto;

    public class SeatDto {
        private int row;
        private int column;
        private int price;

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/dto/RequestSeat.java
  visible: true
  text: |
    package cinema.dto;

    public class RequestSeat {
        private int row;
        private int column;

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/converters/CinemaRoomConverter.java
  visible: true
  text: |
    package cinema.converters;

    import cinema.dto.CinemaRoomDto;
    import cinema.model.CinemaRoom;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    import java.util.stream.Collectors;
    @Component
    public class CinemaRoomConverter {
        @Autowired
        private SeatConverter seatConverter;

        public CinemaRoomDto convertToDto(CinemaRoom room) {
            CinemaRoomDto roomDto = new CinemaRoomDto();
            roomDto.setTotal_rows(room.getTotal_rows());
            roomDto.setTotal_columns(room.getTotal_columns());
            roomDto.setAvailable_seats(
                    room.getTickets().values().stream()
                            .map(seatConverter::convertToDto)
                            .collect(Collectors.toList()));

            return roomDto;
        }
    }
  learner_created: true
- name: src/cinema/dto/CinemaRoomDto.java
  visible: true
  text: |
    package cinema.dto;

    import cinema.model.Seat;

    import java.util.List;

    public class CinemaRoomDto {
        private int total_rows;
        private int total_columns;
        private List<SeatDto> available_seats;

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<SeatDto> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<SeatDto> available_seats) {
            this.available_seats = available_seats;
        }
    }
  learner_created: true
- name: src/cinema/exceptions/MessageException.java
  visible: true
  text: |
    package cinema.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class MessageException {
        private String error;

        public MessageException(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }
    }
  learner_created: true
- name: src/cinema/converters/SeatConverter.java
  visible: true
  text: |
    package cinema.converters;

    import cinema.dto.SeatDto;
    import cinema.model.Seat;
    import org.springframework.stereotype.Component;

    @Component
    public class SeatConverter {
        public SeatDto convertToDto(Seat seat) {
            SeatDto seatDto = new SeatDto();
            seatDto.setRow(seat.getRow());
            seatDto.setColumn(seat.getColumn());
            seatDto.setPrice(seat.getPrice());

            return seatDto;
        }
    }
  learner_created: true
- name: src/cinema/dto/ResponseStats.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 12 Jul 2022 13:41:50 UTC
record: -1
